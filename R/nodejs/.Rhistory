load("~/dev/R/nodejs/PartData.rdata")
View(PartData)
mean(PartData$q3.duration, na.rm=TRUE)
median(PartData$q3.duration, na.rm=TRUE)
median(PartData$q3.duration, na.rm=TRUE)/60
load("~/dev/R/nodejs/course.structure.rdata")
load("~/dev/R/nodejs/PartData.rdata")
View(PartData)
help.start()
ls()
setwd("~/dev/CoReaDa/R/nodejs")
load('PartData.rdata')
View(PartData)
load('nodejs.rdata')
load('course.structure.rdata')
load('nodejs.structure.rdata')
nodejs.Reads = data.frame(part_index=nodejs.structure$part_index,part_id=nodejs.structure$part_id,Readers=0,Rereaders=0,Readings = 0, Rereadings = 0 )
parts=unique(nodejs$part_id)
nparts=length(parts)
load('nodejs.Reads.rdata')
View(nodejs.Reads)
load('nodejs.Ruptures.rdata')
view(nodejs.Ruptures)
View(nodejs.Ruptures)
parents = nodejs.structure[which(nodejs.structure$type=='title-2'),]
nparents = nrow(parents)
for(i in 1:nparents){
children = nodejs.structure[which(nodejs.structure$parent_id==parents$part_id[i]),]$part_id
nodejs.Ruptures[which(nodejs.Ruptures$part_id==parents$part_id[i]),]$rupture =
sum( nodejs.Ruptures[which(nodejs.Ruptures$part_id%in%children),]$rupture)
nodejs.Ruptures[which(nodejs.Ruptures$part_id==parents$part_id[i]),]$norecovery =
sum( nodejs.Ruptures[which(nodejs.Ruptures$part_id%in%children),]$recovery)
nodejs.Ruptures[which(nodejs.Ruptures$part_id==parents$part_id[i]),]$recovery =
sum( nodejs.Ruptures[which(nodejs.Ruptures$part_id%in%children),]$norecovery)
nodejs.Ruptures[which(nodejs.Ruptures$part_id==parents$part_id[i]),]$shifted_recovery =
sum( nodejs.Ruptures[which(nodejs.Ruptures$part_id%in%children),]$shifted_recovery)
nodejs.Ruptures[which(nodejs.Ruptures$part_id==parents$part_id[i]),]$back_recovery =
sum( nodejs.Ruptures[which(nodejs.Ruptures$part_id%in%children),]$back_recovery)
nodejs.Ruptures[which(nodejs.Ruptures$part_id==parents$part_id[i]),]$next_recovery =
sum( nodejs.Ruptures[which(nodejs.Ruptures$part_id%in%children),]$next_recovery)
nodejs.Ruptures[which(nodejs.Ruptures$part_id==parents$part_id[i]),]$direct_recovery =
sum( nodejs.Ruptures[which(nodejs.Ruptures$part_id%in%children),]$direct_recovery)
}
parents = nodejs.structure[which(nodejs.structure$type=='title-1'),]
nparents = nrow(parents)
for(i in 1:nparents){
children = nodejs.structure[which(nodejs.structure$parent_id==parents$part_id[i]),]$part_id
nodejs.Ruptures[which(nodejs.Ruptures$part_id==parents$part_id[i]),]$rupture =
sum( nodejs.Ruptures[which(nodejs.Ruptures$part_id%in%children),]$rupture)
nodejs.Ruptures[which(nodejs.Ruptures$part_id==parents$part_id[i]),]$norecovery =
sum( nodejs.Ruptures[which(nodejs.Ruptures$part_id%in%children),]$recovery)
nodejs.Ruptures[which(nodejs.Ruptures$part_id==parents$part_id[i]),]$recovery =
sum( nodejs.Ruptures[which(nodejs.Ruptures$part_id%in%children),]$norecovery)
nodejs.Ruptures[which(nodejs.Ruptures$part_id==parents$part_id[i]),]$shifted_recovery =
sum( nodejs.Ruptures[which(nodejs.Ruptures$part_id%in%children),]$shifted_recovery)
nodejs.Ruptures[which(nodejs.Ruptures$part_id==parents$part_id[i]),]$back_recovery =
sum( nodejs.Ruptures[which(nodejs.Ruptures$part_id%in%children),]$back_recovery)
nodejs.Ruptures[which(nodejs.Ruptures$part_id==parents$part_id[i]),]$next_recovery =
sum( nodejs.Ruptures[which(nodejs.Ruptures$part_id%in%children),]$next_recovery)
nodejs.Ruptures[which(nodejs.Ruptures$part_id==parents$part_id[i]),]$direct_recovery =
sum( nodejs.Ruptures[which(nodejs.Ruptures$part_id%in%children),]$direct_recovery)
}
parents = nodejs.structure[which(nodejs.structure$type=='course'),]
nparents = nrow(parents)
for(i in 1:nparents){
children = nodejs.structure[which(nodejs.structure$parent_id==parents$part_id[i]),]$part_id
nodejs.Ruptures[which(nodejs.Ruptures$part_id==parents$part_id[i]),]$rupture =
sum( nodejs.Ruptures[which(nodejs.Ruptures$part_id%in%children),]$rupture)
nodejs.Ruptures[which(nodejs.Ruptures$part_id==parents$part_id[i]),]$norecovery =
sum( nodejs.Ruptures[which(nodejs.Ruptures$part_id%in%children),]$recovery)
nodejs.Ruptures[which(nodejs.Ruptures$part_id==parents$part_id[i]),]$recovery =
sum( nodejs.Ruptures[which(nodejs.Ruptures$part_id%in%children),]$norecovery)
nodejs.Ruptures[which(nodejs.Ruptures$part_id==parents$part_id[i]),]$shifted_recovery =
sum( nodejs.Ruptures[which(nodejs.Ruptures$part_id%in%children),]$shifted_recovery)
nodejs.Ruptures[which(nodejs.Ruptures$part_id==parents$part_id[i]),]$back_recovery =
sum( nodejs.Ruptures[which(nodejs.Ruptures$part_id%in%children),]$back_recovery)
nodejs.Ruptures[which(nodejs.Ruptures$part_id==parents$part_id[i]),]$next_recovery =
sum( nodejs.Ruptures[which(nodejs.Ruptures$part_id%in%children),]$next_recovery)
nodejs.Ruptures[which(nodejs.Ruptures$part_id==parents$part_id[i]),]$direct_recovery =
sum( nodejs.Ruptures[which(nodejs.Ruptures$part_id%in%children),]$direct_recovery)
}
save(nodejs.Ruptures,file="nodejs.Ruptures.rdata")
selectedCourse='nodejs'
load(paste(selectedCourse,"rdata",sep="."))
load(paste(selectedCourse,"structure.rdata",sep="."))
load(paste(selectedCourse,"Interest.rdata",sep="."))
load(paste(selectedCourse,"Reads.rdata",sep="."))
load(paste(selectedCourse,"Ruptures.rdata",sep="."))
load(paste(selectedCourse,"RS.rdata",sep="."))
load(paste(selectedCourse,"partFollow.rdata",sep="."))
load(paste(selectedCourse,"achievement.rdata",sep="."))
PartData = structure
structure
structure = nodejs.structure
PartData = structure
PartData
names(PartData)[1]=c('part_index')
PartData[which(PartData$id==0),]$part_index=-1*(0:(nParties-1))
nParties = nrow(PartData[which(PartData$id==0),])
nParties
nParties = nrow(PartData[which(PartData$part_index==0),])
nParties
PartData[which(PartData$part_index==0),]$part_index=-1*(0:(nParties-1))
PartData[which(PartData$type=='title-1'),]$type='partie'
PartData[which(PartData$type=='title-2'),]$type='chapitre'
PartData[which(PartData$type=='title-3'),]$type='section'
Interest[,c(2,3,4,5,6)]
Interest = eval(parse(text = paste(selectedCourse,"Interest",sep=".")))
Reads = eval(parse(text = paste(selectedCourse,"Reads",sep=".")))
Ruptures = eval(parse(text = paste(selectedCourse,"Ruptures",sep=".")))
RS = eval(parse(text = paste(selectedCourse,"RS",sep=".")))
partFollow=eval(parse(text = paste(selectedCourse,"partFollow",sep=".")))
data = eval(parse(text = paste(selectedCourse,sep=".")))
achievement = eval(parse(text = paste(selectedCourse,"achievement",sep=".")))
Interest
PartData = merge(PartData, Interest[,c(1,2,3,4,5)],all.x = TRUE)
PartData
names(PartData)[2]
names(PartData)[3]
names(PartData)[4]
names(PartData)[4]='part_title'
names(PartData)[5]
names(PartData)[5]='part_type'
Reads
PartData
PartData = merge(PartData, Reads[,-c(1)], all.x = TRUE)
Ruptures
PartData = merge(PartData, Ruptures[,-c(1)], all.x = TRUE)
PartData
names(Provenances_stats)=c("part_index","provenance_precedent","provenance_shifted_past", "provenance_identity","provenance_next_p","provenance_shifted_next","provenance_total_next")
names(Destinations_stats)=c("part_index","destination_precedent","destination_shifted_past", "destination_identity","destination_next_p","destination_shifted_next","destination_total_next")
part_indexes=1:(max(structure$part_index))
Destinations_stats = data.frame(part_index=part_indexes,precedent=0,shifted_past=0,identity=0,next_p=0,shifted_next=0,total_back=0)
for(aPart in 1:max(structure$part_index))
{
aPartDest = data.frame(part=1:(nrow(partFollow)), frequence=partFollow[aPart,])
nodes_dest=aPartDest[which(aPartDest$frequence>median(aPartDest$frequence)),]
nodes_dest$ratio = round(nodes_dest$frequence*100/sum(nodes_dest$frequence),0)
if((aPart) %in% nodes_dest$part)
Destinations_stats[which(Destinations_stats$part_index==aPart),]$identity =
nodes_dest[nodes_dest$part==aPart,]$ratio
if((aPart-1) %in% nodes_dest$part)
Destinations_stats[Destinations_stats$part_index==aPart,]$precedent =
nodes_dest[nodes_dest$part==aPart-1,]$ratio
if((aPart+1) %in% nodes_dest$part)
Destinations_stats[Destinations_stats$part_index==aPart,]$next_p = nodes_dest[nodes_dest$part==aPart+1,]$ratio
Destinations_stats[Destinations_stats$part_index==aPart,]$shifted_past = sum(nodes_dest[nodes_dest$part<aPart-1,]$ratio)
Destinations_stats[Destinations_stats$part_index==aPart,]$shifted_next = sum(nodes_dest[nodes_dest$part>aPart+1,]$ratio)
Destinations_stats[Destinations_stats$part_index==aPart,]$total_back = Destinations_stats[Destinations_stats$part_index==aPart,]$precedent +
Destinations_stats[Destinations_stats$part_index==aPart,]$shifted_past
}
partPrecedent <- t(partFollow)
Provenances_stats = data.frame(part_index=part_indexes,precedent=0,shifted_past=0,identity=0,next_p=0,shifted_next=0,total_next=0)
for(aPart in 1:max(structure$part_index))
{
aPartProv = data.frame(part=1:nrow(partPrecedent), frequence=partPrecedent[aPart,])
nodes_prov=aPartProv[which(aPartProv$frequence>median(aPartProv$frequence)),]
nodes_prov$ratio = round(nodes_prov$frequence*100/sum(nodes_prov$frequence),0)
if((aPart) %in% nodes_prov$part)
Provenances_stats[which(Provenances_stats$part_index==aPart),]$identity = nodes_prov[nodes_prov$part==aPart,]$ratio
if((aPart-1) %in% nodes_prov$part)
Provenances_stats[Provenances_stats$part_index==aPart,]$precedent = nodes_prov[nodes_prov$part==aPart-1,]$ratio
if((aPart+1) %in% nodes_prov$part)
Provenances_stats[Provenances_stats$part_index==aPart,]$next_p = nodes_prov[nodes_prov$part==aPart+1,]$ratio
Provenances_stats[Provenances_stats$part_index==aPart,]$shifted_past = sum(nodes_prov[nodes_prov$part<aPart-1,]$ratio)
Provenances_stats[Provenances_stats$part_index==aPart,]$shifted_next = sum(nodes_prov[nodes_prov$part>aPart+1,]$ratio)
Provenances_stats[Provenances_stats$part_index==aPart,]$total_next = Provenances_stats[Provenances_stats$part_index==aPart,]$next_p +
Provenances_stats[Provenances_stats$part_index==aPart,]$shifted_next
}
ProvenancesData = Provenances_stats[,-c(7)]
for(i in 1:nrow(ProvenancesData)){
somme=sum(ProvenancesData[i,-c(1)])
if(somme> 0)ProvenancesData[i,-c(1)] = round(ProvenancesData[i,-c(1)]*100/somme,0)
}
names(Provenances_stats)=c("part_index","provenance_precedent","provenance_shifted_past", "provenance_identity","provenance_next_p","provenance_shifted_next","provenance_total_next")
names(Destinations_stats)=c("part_index","destination_precedent","destination_shifted_past", "destination_identity","destination_next_p","destination_shifted_next","destination_total_next")
Destinations_stats
PartData = merge(PartData, Provenances_stats,  by = 'part_index',all.x = TRUE)
PartData = merge(PartData, Destinations_stats,  by = 'part_index',all.x = TRUE)
Destinations_stats
partFollow
chaptersIds = PartData[which(PartData$part_type=='chapitre'),]
chaptersIds
chaptersIds = PartData[which(PartData$part_type=='chapitre'),]$part_id
chaptersIds
i=1
PartData[which(PartData$part_id==chaptersIds[i]),]$provenance_precedent
PartData[which(PartData$part_id==chaptersIds[i]),]
mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$provenance_precedent)
PartData[which(PartData$parent_id==chaptersIds[i]),]$provenance_precedent
PartData[which(PartData$parent_id==chaptersIds[i]),]
PartData[which(PartData$parent_id==chaptersIds[i]),]$provenance_precedent
PartData[which(PartData$part_id==chaptersIds[i]),]
PartData[which(PartData$parent_id==chaptersIds[i]),]$provenance_precedent
mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$provenance_precedent)
for(i in 1:length(chaptersIds)){
PartData[which(PartData$part_id==chaptersIds[i]),]$provenance_precedent =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$provenance_precedent)
PartData[which(PartData$part_id==chaptersIds[i]),]$provenance_shifted_past =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$provenance_shifted_past)
PartData[which(PartData$part_id==chaptersIds[i]),]$provenance_identity =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$provenance_identity)
PartData[which(PartData$part_id==chaptersIds[i]),]$provenance_next_p =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$provenance_next_p)
PartData[which(PartData$part_id==chaptersIds[i]),]$provenance_shifted_next =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$provenance_shifted_next)
PartData[which(PartData$part_id==chaptersIds[i]),]$provenance_total_next =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$provenance_total_next)
PartData[which(PartData$part_id==chaptersIds[i]),]$destination_precedent =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$destination_precedent)
PartData[which(PartData$part_id==chaptersIds[i]),]$destination_shifted_past =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$destination_shifted_past)
PartData[which(PartData$part_id==chaptersIds[i]),]$destination_identity =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$destination_identity)
PartData[which(PartData$part_id==chaptersIds[i]),]$destination_next_p =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$destination_next_p)
PartData[which(PartData$part_id==chaptersIds[i]),]$destination_shifted_next =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$destination_shifted_next)
PartData[which(PartData$part_id==chaptersIds[i]),]$destination_total_next =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$destination_total_next)
}
tomesIds = PartData[which(PartData$part_type=='partie'),]$part_id
tomesIds
chaptersIds = PartData[which(PartData$part_type=='chapitre'),]$part_id
for(i in 1:length(chaptersIds)){
PartData[which(PartData$part_id==chaptersIds[i]),]$provenance_precedent =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$provenance_precedent)
PartData[which(PartData$part_id==chaptersIds[i]),]$provenance_shifted_past =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$provenance_shifted_past)
PartData[which(PartData$part_id==chaptersIds[i]),]$provenance_identity =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$provenance_identity)
PartData[which(PartData$part_id==chaptersIds[i]),]$provenance_next_p =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$provenance_next_p)
PartData[which(PartData$part_id==chaptersIds[i]),]$provenance_shifted_next =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$provenance_shifted_next)
PartData[which(PartData$part_id==chaptersIds[i]),]$provenance_total_next =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$provenance_total_next)
PartData[which(PartData$part_id==chaptersIds[i]),]$destination_precedent =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$destination_precedent)
PartData[which(PartData$part_id==chaptersIds[i]),]$destination_shifted_past =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$destination_shifted_past)
PartData[which(PartData$part_id==chaptersIds[i]),]$destination_identity =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$destination_identity)
PartData[which(PartData$part_id==chaptersIds[i]),]$destination_next_p =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$destination_next_p)
PartData[which(PartData$part_id==chaptersIds[i]),]$destination_shifted_next =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$destination_shifted_next)
PartData[which(PartData$part_id==chaptersIds[i]),]$destination_total_next =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$destination_total_next)
}
tomesIds = PartData[which(PartData$part_type=='partie'),]$part_id
for(i in 1:length(chaptersIds)){
PartData[which(PartData$part_id==chaptersIds[i]),]$provenance_precedent =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$provenance_precedent)
PartData[which(PartData$part_id==chaptersIds[i]),]$provenance_shifted_past =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$provenance_shifted_past)
PartData[which(PartData$part_id==chaptersIds[i]),]$provenance_identity =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$provenance_identity)
PartData[which(PartData$part_id==chaptersIds[i]),]$provenance_next_p =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$provenance_next_p)
PartData[which(PartData$part_id==chaptersIds[i]),]$provenance_shifted_next =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$provenance_shifted_next)
PartData[which(PartData$part_id==chaptersIds[i]),]$provenance_total_next =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$provenance_total_next)
PartData[which(PartData$part_id==chaptersIds[i]),]$destination_precedent =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$destination_precedent)
PartData[which(PartData$part_id==chaptersIds[i]),]$destination_shifted_past =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$destination_shifted_past)
PartData[which(PartData$part_id==chaptersIds[i]),]$destination_identity =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$destination_identity)
PartData[which(PartData$part_id==chaptersIds[i]),]$destination_next_p =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$destination_next_p)
PartData[which(PartData$part_id==chaptersIds[i]),]$destination_shifted_next =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$destination_shifted_next)
PartData[which(PartData$part_id==chaptersIds[i]),]$destination_total_next =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$destination_total_next)
}
tomesIds = PartData[which(PartData$part_type=='partie'),]$part_id
for(i in 1:length(tomesIds)){
PartData[which(PartData$part_id==tomesIds[i]),]$provenance_precedent =  mean(PartData[which(PartData$parent_id==tomesIds[i]),]$provenance_precedent)
PartData[which(PartData$part_id==tomesIds[i]),]$provenance_shifted_past =  mean(PartData[which(PartData$parent_id==tomesIds[i]),]$provenance_shifted_past)
PartData[which(PartData$part_id==tomesIds[i]),]$provenance_identity =  mean(PartData[which(PartData$parent_id==tomesIds[i]),]$provenance_identity)
PartData[which(PartData$part_id==tomesIds[i]),]$provenance_next_p =  mean(PartData[which(PartData$parent_id==tomesIds[i]),]$provenance_next_p)
PartData[which(PartData$part_id==tomesIds[i]),]$provenance_shifted_next =  mean(PartData[which(PartData$parent_id==tomesIds[i]),]$provenance_shifted_next)
PartData[which(PartData$part_id==tomesIds[i]),]$provenance_total_next =  mean(PartData[which(PartData$parent_id==tomesIds[i]),]$provenance_total_next)
PartData[which(PartData$part_id==tomesIds[i]),]$destination_precedent =  mean(PartData[which(PartData$parent_id==tomesIds[i]),]$destination_precedent)
PartData[which(PartData$part_id==tomesIds[i]),]$destination_shifted_past =  mean(PartData[which(PartData$parent_id==tomesIds[i]),]$destination_shifted_past)
PartData[which(PartData$part_id==tomesIds[i]),]$destination_identity =  mean(PartData[which(PartData$parent_id==tomesIds[i]),]$destination_identity)
PartData[which(PartData$part_id==tomesIds[i]),]$destination_next_p =  mean(PartData[which(PartData$parent_id==tomesIds[i]),]$destination_next_p)
PartData[which(PartData$part_id==tomesIds[i]),]$destination_shifted_next =  mean(PartData[which(PartData$parent_id==tomesIds[i]),]$destination_shifted_next)
PartData[which(PartData$part_id==tomesIds[i]),]$destination_total_next =  mean(PartData[which(PartData$parent_id==tomesIds[i]),]$destination_total_next)
}
chaptersIds = PartData[which(PartData$part_type=='chapitre'),]$part_id
for(i in 1:length(chaptersIds)){
PartData[which(PartData$part_id==chaptersIds[i]),]$max.duration =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$max.duration)
PartData[which(PartData$part_id==chaptersIds[i]),]$q1.duration =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$q1.duration)
PartData[which(PartData$part_id==chaptersIds[i]),]$q3.duration =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$q3.duration)
PartData[which(PartData$part_id==chaptersIds[i]),]$mean.duration =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$mean.duration)
PartData[which(PartData$part_id==chaptersIds[i]),]$median.duration =  mean(PartData[which(PartData$parent_id==chaptersIds[i]),]$median.duration)
}
tomesIds = PartData[which(PartData$part_type=='partie'),]$part_id
for(i in 1:length(tomesIds)){
PartData[which(PartData$part_id==tomesIds[i]),]$max.duration =  mean(PartData[which(PartData$parent_id==tomesIds[i]),]$max.duration)
PartData[which(PartData$part_id==tomesIds[i]),]$q1.duration =  mean(PartData[which(PartData$parent_id==tomesIds[i]),]$q1.duration)
PartData[which(PartData$part_id==tomesIds[i]),]$q3.duration =  mean(PartData[which(PartData$parent_id==tomesIds[i]),]$q3.duration)
PartData[which(PartData$part_id==tomesIds[i]),]$mean.duration =  mean(PartData[which(PartData$parent_id==tomesIds[i]),]$mean.duration)
PartData[which(PartData$part_id==tomesIds[i]),]$median.duration =  mean(PartData[which(PartData$parent_id==tomesIds[i]),]$median.duration)
}
PartData$Readers_tx = round(PartData$Readers / nusers, 4)
PartData$RS_tx = round(PartData$RS_nb / nrow(nodejs.RS), 4)
nusers=length(unique(nodejs$user_id))part_id
nusers=length(unique(nodejs$user_id))
nusers
PartData$Readers_tx = round(PartData$Readers / nusers, 4)
PartData$RS_tx = round(PartData$RS_nb / nrow(nodejs.RS), 4)
save(PartData, file='PartData.rdata')
colnames(PartData)[1]="id"
meltParts=melt(PartData, id.vars = 'id')
library('jsonlite')
library('reshape')
meltParts=melt(PartData, id.vars = 'id')
PartsData.json = toJSON(unname(split(meltParts,1:nrow(meltParts))))
cat(PartsData.json, file="structure.json")
View(PartData)
chaptersIds = PartData[which(PartData$part_type=='chapitre'),]$part_id
for(i in 1:length(chaptersIds)){
PartData[which(PartData$part_id==chaptersIds[i]),]$max.duration =  sum(PartData[which(PartData$parent_id==chaptersIds[i]),]$max.duration)
PartData[which(PartData$part_id==chaptersIds[i]),]$q1.duration =  sum(PartData[which(PartData$parent_id==chaptersIds[i]),]$q1.duration)
PartData[which(PartData$part_id==chaptersIds[i]),]$q3.duration =  sum(PartData[which(PartData$parent_id==chaptersIds[i]),]$q3.duration)
PartData[which(PartData$part_id==chaptersIds[i]),]$mean.duration =  sum(PartData[which(PartData$parent_id==chaptersIds[i]),]$mean.duration)
PartData[which(PartData$part_id==chaptersIds[i]),]$median.duration =  sum(PartData[which(PartData$parent_id==chaptersIds[i]),]$median.duration)
}
tomesIds = PartData[which(PartData$part_type=='partie'),]$part_id
for(i in 1:length(tomesIds)){
PartData[which(PartData$part_id==tomesIds[i]),]$max.duration =  sum(PartData[which(PartData$parent_id==tomesIds[i]),]$max.duration)
PartData[which(PartData$part_id==tomesIds[i]),]$q1.duration =  sum(PartData[which(PartData$parent_id==tomesIds[i]),]$q1.duration)
PartData[which(PartData$part_id==tomesIds[i]),]$q3.duration =  sum(PartData[which(PartData$parent_id==tomesIds[i]),]$q3.duration)
PartData[which(PartData$part_id==tomesIds[i]),]$mean.duration =  sum(PartData[which(PartData$parent_id==tomesIds[i]),]$mean.duration)
PartData[which(PartData$part_id==tomesIds[i]),]$median.duration =  sum(PartData[which(PartData$parent_id==tomesIds[i]),]$median.duration)
}
meltParts=melt(PartData, id.vars = 'id')
PartsData.json = toJSON(unname(split(meltParts,1:nrow(meltParts))))
cat(PartsData.json, file="structure.json")
