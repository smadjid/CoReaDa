Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$shifted_past = sum(nodes_dest[nodes_dest$chap<aChap-1,]$ratio)
Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$shifted_next = sum(nodes_dest[nodes_dest$chap>aChap+1,]$ratio)
Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$total_back = Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$precedent +
Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$shifted_past
}
for(aChap in 1:max(chap_indexes))
{
aChapDest = data.frame(chap=1:(nrow(chapFollow)), frequence=chapFollow[aChap,])
nodes_dest=aChapDest[which(aChapDest$frequence>median(aChapDest$frequence)),]
nodes_dest$ratio = round(nodes_dest$frequence*100/sum(nodes_dest$frequence),0)
if((aChap) %in% nodes_dest$chap)
Chaps_destinations_stats[which(Chaps_destinations_stats$chap_index==aChap),]$identity =
nodes_dest[nodes_dest$chap==aChap,]$ratio
if((aChap-1) %in% nodes_dest$chap)
Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$precedent =
nodes_dest[nodes_dest$chap==aChap-1,]$ratio
if((aChap+1) %in% nodes_dest$chap)
Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$next_p = nodes_dest[nodes_dest$chap==aChap+1,]$ratio
Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$shifted_past = sum(nodes_dest[nodes_dest$chap<aChap-1,]$ratio)
Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$shifted_next = sum(nodes_dest[nodes_dest$chap>aChap+1,]$ratio)
Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$total_back = Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$precedent +
Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$shifted_past
}
Chaps_destinations_stats
chapPrecedent <- t(chapFollow)
Chaps_provenances_stats = data.frame(chap_index=chap_indexes,precedent=0,shifted_past=0,identity=0,next_p=0,shifted_next=0,total_next=0)
for(aChap in 1:max(chap_indexes))
{
aChapProv = data.frame(chap=1:nrow(chapPrecedent), frequence=chapPrecedent[aChap,])
nodes_prov=aChapProv[which(aChapProv$frequence>median(aChapProv$frequence)),]
nodes_prov$ratio = round(nodes_prov$frequence*100/sum(nodes_prov$frequence),0)
if((aChap) %in% nodes_prov$chap)
Chaps_provenances_stats[which(Chaps_provenances_stats$chap_index==aChap),]$identity = nodes_prov[nodes_prov$chap==aChap,]$ratio
if((aChap-1) %in% nodes_prov$chap)
Chaps_provenances_stats[Chaps_provenances_stats$chap_index==aChap,]$precedent = nodes_prov[nodes_prov$chap==aChap-1,]$ratio
if((aChap+1) %in% nodes_prov$chap)
Chaps_provenances_stats[Chaps_provenances_stats$chap_index==aChap,]$next_p = nodes_prov[nodes_prov$chap==aChap+1,]$ratio
Chaps_provenances_stats[Chaps_provenances_stats$chap_index==aChap,]$shifted_past = sum(nodes_prov[nodes_prov$chap<aChap-1,]$ratio)
Chaps_provenances_stats[Chaps_provenances_stats$chap_index==aChap,]$shifted_next = sum(nodes_prov[nodes_prov$chap>aChap+1,]$ratio)
Chaps_provenances_stats[Chaps_provenances_stats$chap_index==aChap,]$total_next = Chaps_provenances_stats[Chaps_provenances_stats$chap_index==aChap,]$next_p +
Chaps_provenances_stats[Chaps_provenances_stats$chap_index==aChap,]$shifted_next
}
ChapsProvenancesData = Chaps_provenances_stats[,-c(7)]
ChapsProvenancesData
Chaps_provenances_stats[,-c(7)]
Chaps_provenances_stats
ChapsProvenancesData = Chaps_provenances_stats[,-c(7)]
for(i in 1:nrow(ChapsProvenancesData)){
somme=sum(ChapsProvenancesData[i,-c(1)])
if(somme> 0)ChapsProvenancesData[i,-c(1)] = round(ChapsProvenancesData[i,-c(1)]*100/somme,0)
}
tome_indexes=1:(max(structure$tome_index,na.rm=TRUE))
tome_indexes
tome_indexes=1:(max(structure$tome_index,na.rm=TRUE))
Tomes_destinations_stats = data.frame(tome_index=tome_indexes,precedent=0,shifted_past=0,identity=0,next_p=0,shifted_next=0,total_back=0)
for(aTome in 1:max(tome_indexes))
{
aTomeDest = data.frame(tome=1:(nrow(tomeFollow)), frequence=tomeFollow[aTome,])
nodes_dest=aTomeDest[which(aTomeDest$frequence>median(aTomeDest$frequence)),]
nodes_dest$ratio = round(nodes_dest$frequence*100/sum(nodes_dest$frequence),0)
if((aTome) %in% nodes_dest$tome)
Tomes_destinations_stats[which(Tomes_destinations_stats$tome_index==aTome),]$identity =
nodes_dest[nodes_dest$tome==aTome,]$ratio
if((aTome-1) %in% nodes_dest$tome)
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$precedent =
nodes_dest[nodes_dest$tome==aTome-1,]$ratio
if((aTome+1) %in% nodes_dest$tome)
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$next_p = nodes_dest[nodes_dest$tome==aTome+1,]$ratio
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$shifted_past = sum(nodes_dest[nodes_dest$tome<aTome-1,]$ratio)
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$shifted_next = sum(nodes_dest[nodes_dest$tome>aTome+1,]$ratio)
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$total_back = Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$precedent +
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$shifted_past
}
tomePrecedent <- t(tomeFollow)
Tomes_provenances_stats = data.frame(tome_index=tome_indexes,precedent=0,shifted_past=0,identity=0,next_p=0,shifted_next=0,total_next=0)
for(aTome in 1:max(tome_indexes))
{
aTomeProv = data.frame(tome=1:nrow(tomePrecedent), frequence=tomePrecedent[aTome,])
nodes_prov=aTomeProv[which(aTomeProv$frequence>median(aTomeProv$frequence)),]
nodes_prov$ratio = round(nodes_prov$frequence*100/sum(nodes_prov$frequence),0)
if((aTome) %in% nodes_prov$tome)
Tomes_provenances_stats[which(Tomes_provenances_stats$tome_index==aTome),]$identity = nodes_prov[nodes_prov$tome==aTome,]$ratio
if((aTome-1) %in% nodes_prov$tome)
Tomes_provenances_stats[Tomes_provenances_stats$tome_index==aTome,]$precedent = nodes_prov[nodes_prov$tome==aTome-1,]$ratio
if((aTome+1) %in% nodes_prov$tome)
Tomes_provenances_stats[Tomes_provenances_stats$tome_index==aTome,]$next_p = nodes_prov[nodes_prov$tome==aTome+1,]$ratio
Tomes_provenances_stats[Tomes_provenances_stats$tome_index==aTome,]$shifted_past = sum(nodes_prov[nodes_prov$tome<aTome-1,]$ratio)
Tomes_provenances_stats[Tomes_provenances_stats$tome_index==aTome,]$shifted_next = sum(nodes_prov[nodes_prov$tome>aTome+1,]$ratio)
Tomes_provenances_stats[Tomes_provenances_stats$tome_index==aTome,]$total_next = Tomes_provenances_stats[Tomes_provenances_stats$tome_index==aTome,]$next_p +
Tomes_provenances_stats[Tomes_provenances_stats$tome_index==aTome,]$shifted_next
}
TomesProvenancesData = Tomes_provenances_stats[,-c(7)]
for(i in 1:nrow(TomesProvenancesData)){
somme=sum(TomesProvenancesData[i,-c(1)])
if(somme> 0)TomesProvenancesData[i,-c(1)] = round(TomesProvenancesData[i,-c(1)]*100/somme,0)
}
TomesProvenancesData
Tomes_provenances_stats
nodejs.tomeFollow
Tomes_destinations_stats
tomeFollow
aTome
aTome=1
aTomeDest = data.frame(tome=1:(nrow(tomeFollow)), frequence=tomeFollow[aTome,])
aTomeDest
nodes_dest=aTomeDest[which(aTomeDest$frequence>median(aTomeDest$frequence)),]
nodes_dest
nodes_dest=aTomeDest
nodes_dest$ratio = round(nodes_dest$frequence*100/sum(nodes_dest$frequence),0)
nodes_dest
nodes_dest$ratio
for(aTome in 1:max(tome_indexes))
{
aTomeDest = data.frame(tome=1:(nrow(tomeFollow)), frequence=tomeFollow[aTome,])
nodes_dest=aTomeDest
nodes_dest$ratio = round(nodes_dest$frequence*100/sum(nodes_dest$frequence),0)
if((aTome) %in% nodes_dest$tome)
Tomes_destinations_stats[which(Tomes_destinations_stats$tome_index==aTome),]$identity =
nodes_dest[nodes_dest$tome==aTome,]$ratio
if((aTome-1) %in% nodes_dest$tome)
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$precedent =
nodes_dest[nodes_dest$tome==aTome-1,]$ratio
if((aTome+1) %in% nodes_dest$tome)
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$next_p = nodes_dest[nodes_dest$tome==aTome+1,]$ratio
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$shifted_past = sum(nodes_dest[nodes_dest$tome<aTome-1,]$ratio)
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$shifted_next = sum(nodes_dest[nodes_dest$tome>aTome+1,]$ratio)
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$total_back = Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$precedent +
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$shifted_past
}
Tomes_destinations_stats
part_indexes=1:(max(structure$part_index))
Parts_destinations_stats = data.frame(part_index=part_indexes,precedent=0,shifted_past=0,identity=0,next_p=0,shifted_next=0,total_back=0)
for(aPart in 1:max(structure$part_index))
{
aPartDest = data.frame(part=1:(nrow(partFollow)), frequence=partFollow[aPart,])
nodes_dest=aPartDest
nodes_dest$ratio = round(nodes_dest$frequence*100/sum(nodes_dest$frequence),0)
if((aPart) %in% nodes_dest$part)
Parts_destinations_stats[which(Parts_destinations_stats$part_index==aPart),]$identity =
nodes_dest[nodes_dest$part==aPart,]$ratio
if((aPart-1) %in% nodes_dest$part)
Parts_destinations_stats[Parts_destinations_stats$part_index==aPart,]$precedent =
nodes_dest[nodes_dest$part==aPart-1,]$ratio
if((aPart+1) %in% nodes_dest$part)
Parts_destinations_stats[Parts_destinations_stats$part_index==aPart,]$next_p = nodes_dest[nodes_dest$part==aPart+1,]$ratio
Parts_destinations_stats[Parts_destinations_stats$part_index==aPart,]$shifted_past = sum(nodes_dest[nodes_dest$part<aPart-1,]$ratio)
Parts_destinations_stats[Parts_destinations_stats$part_index==aPart,]$shifted_next = sum(nodes_dest[nodes_dest$part>aPart+1,]$ratio)
Parts_destinations_stats[Parts_destinations_stats$part_index==aPart,]$total_back = Parts_destinations_stats[Parts_destinations_stats$part_index==aPart,]$precedent +
Parts_destinations_stats[Parts_destinations_stats$part_index==aPart,]$shifted_past
}
partPrecedent <- t(partFollow)
Parts_provenances_stats = data.frame(part_index=part_indexes,precedent=0,shifted_past=0,identity=0,next_p=0,shifted_next=0,total_next=0)
for(aPart in 1:max(structure$part_index))
{
aPartProv = data.frame(part=1:nrow(partPrecedent), frequence=partPrecedent[aPart,])
nodes_prov=aPartProv
nodes_prov$ratio = round(nodes_prov$frequence*100/sum(nodes_prov$frequence),0)
if((aPart) %in% nodes_prov$part)
Parts_provenances_stats[which(Parts_provenances_stats$part_index==aPart),]$identity = nodes_prov[nodes_prov$part==aPart,]$ratio
if((aPart-1) %in% nodes_prov$part)
Parts_provenances_stats[Parts_provenances_stats$part_index==aPart,]$precedent = nodes_prov[nodes_prov$part==aPart-1,]$ratio
if((aPart+1) %in% nodes_prov$part)
Parts_provenances_stats[Parts_provenances_stats$part_index==aPart,]$next_p = nodes_prov[nodes_prov$part==aPart+1,]$ratio
Parts_provenances_stats[Parts_provenances_stats$part_index==aPart,]$shifted_past = sum(nodes_prov[nodes_prov$part<aPart-1,]$ratio)
Parts_provenances_stats[Parts_provenances_stats$part_index==aPart,]$shifted_next = sum(nodes_prov[nodes_prov$part>aPart+1,]$ratio)
Parts_provenances_stats[Parts_provenances_stats$part_index==aPart,]$total_next = Parts_provenances_stats[Parts_provenances_stats$part_index==aPart,]$next_p +
Parts_provenances_stats[Parts_provenances_stats$part_index==aPart,]$shifted_next
}
PartsProvenancesData = Parts_provenances_stats[,-c(7)]
for(i in 1:nrow(PartsProvenancesData)){
somme=sum(PartsProvenancesData[i,-c(1)])
if(somme> 0)PartsProvenancesData[i,-c(1)] = round(PartsProvenancesData[i,-c(1)]*100/somme,0)
}
PartsProvenancesData
chap_indexes=1:(max(structure$chap_index,na.rm=TRUE))
Chaps_destinations_stats = data.frame(chap_index=chap_indexes,precedent=0,shifted_past=0,identity=0,next_p=0,shifted_next=0,total_back=0)
for(aChap in 1:max(chap_indexes))
{
aChapDest = data.frame(chap=1:(nrow(chapFollow)), frequence=chapFollow[aChap,])
nodes_dest=aChapDest
nodes_dest$ratio = round(nodes_dest$frequence*100/sum(nodes_dest$frequence),0)
if((aChap) %in% nodes_dest$chap)
Chaps_destinations_stats[which(Chaps_destinations_stats$chap_index==aChap),]$identity =
nodes_dest[nodes_dest$chap==aChap,]$ratio
if((aChap-1) %in% nodes_dest$chap)
Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$precedent =
nodes_dest[nodes_dest$chap==aChap-1,]$ratio
if((aChap+1) %in% nodes_dest$chap)
Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$next_p = nodes_dest[nodes_dest$chap==aChap+1,]$ratio
Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$shifted_past = sum(nodes_dest[nodes_dest$chap<aChap-1,]$ratio)
Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$shifted_next = sum(nodes_dest[nodes_dest$chap>aChap+1,]$ratio)
Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$total_back = Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$precedent +
Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$shifted_past
}
chapPrecedent <- t(chapFollow)
Chaps_provenances_stats = data.frame(chap_index=chap_indexes,precedent=0,shifted_past=0,identity=0,next_p=0,shifted_next=0,total_next=0)
for(aChap in 1:max(chap_indexes))
{
aChapProv = data.frame(chap=1:nrow(chapPrecedent), frequence=chapPrecedent[aChap,])
nodes_prov=aChapProv
nodes_prov$ratio = round(nodes_prov$frequence*100/sum(nodes_prov$frequence),0)
if((aChap) %in% nodes_prov$chap)
Chaps_provenances_stats[which(Chaps_provenances_stats$chap_index==aChap),]$identity = nodes_prov[nodes_prov$chap==aChap,]$ratio
if((aChap-1) %in% nodes_prov$chap)
Chaps_provenances_stats[Chaps_provenances_stats$chap_index==aChap,]$precedent = nodes_prov[nodes_prov$chap==aChap-1,]$ratio
if((aChap+1) %in% nodes_prov$chap)
Chaps_provenances_stats[Chaps_provenances_stats$chap_index==aChap,]$next_p = nodes_prov[nodes_prov$chap==aChap+1,]$ratio
Chaps_provenances_stats[Chaps_provenances_stats$chap_index==aChap,]$shifted_past = sum(nodes_prov[nodes_prov$chap<aChap-1,]$ratio)
Chaps_provenances_stats[Chaps_provenances_stats$chap_index==aChap,]$shifted_next = sum(nodes_prov[nodes_prov$chap>aChap+1,]$ratio)
Chaps_provenances_stats[Chaps_provenances_stats$chap_index==aChap,]$total_next = Chaps_provenances_stats[Chaps_provenances_stats$chap_index==aChap,]$next_p +
Chaps_provenances_stats[Chaps_provenances_stats$chap_index==aChap,]$shifted_next
}
ChapsProvenancesData = Chaps_provenances_stats[,-c(7)]
for(i in 1:nrow(ChapsProvenancesData)){
somme=sum(ChapsProvenancesData[i,-c(1)])
if(somme> 0)ChapsProvenancesData[i,-c(1)] = round(ChapsProvenancesData[i,-c(1)]*100/somme,0)
}
ChapsProvenancesData
PartsProvenancesData
partFollow
nodes_dest$part
aPart
aPart=1
aPartDest = data.frame(part=1:(nrow(partFollow)), frequence=partFollow[aPart,])
aPartDest
aPart
tome_indexes=1:(max(structure$tome_index,na.rm=TRUE))
Tomes_destinations_stats = data.frame(tome_index=tome_indexes,precedent=0,shifted_past=0,identity=0,next_p=0,shifted_next=0,total_back=0)
for(aTome in 1:max(tome_indexes))
{
aTomeDest = data.frame(tome=1:(nrow(tomeFollow)), frequence=tomeFollow[aTome,])
aTomeDest = aTomeDest[which(aTomeDest$tome!=aTome)]
nodes_dest=aTomeDest
nodes_dest$ratio = round(nodes_dest$frequence*100/sum(nodes_dest$frequence),0)
if((aTome-1) %in% nodes_dest$tome)
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$precedent =
nodes_dest[nodes_dest$tome==aTome-1,]$ratio
if((aTome+1) %in% nodes_dest$tome)
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$next_p = nodes_dest[nodes_dest$tome==aTome+1,]$ratio
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$shifted_past = sum(nodes_dest[nodes_dest$tome<aTome-1,]$ratio)
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$shifted_next = sum(nodes_dest[nodes_dest$tome>aTome+1,]$ratio)
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$total_back = Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$precedent +
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$shifted_past
}
tomeFollow
aTomeDest = data.frame(tome=1:(nrow(tomeFollow)), frequence=tomeFollow[aTome,])
aTomeDest
aTomeDest = aTomeDest[which(aTomeDest$tome!=aTome)]
aTomeDest
aTomeDest$tome
aTomeDest = aTomeDest[which(aTomeDest$tome!=aTome),]
aTomeDest
for(aTome in 1:max(tome_indexes))
{
aTomeDest = data.frame(tome=1:(nrow(tomeFollow)), frequence=tomeFollow[aTome,])
aTomeDest = aTomeDest[which(aTomeDest$tome!=aTome),]
nodes_dest=aTomeDest
nodes_dest$ratio = round(nodes_dest$frequence*100/sum(nodes_dest$frequence),0)
if((aTome-1) %in% nodes_dest$tome)
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$precedent =
nodes_dest[nodes_dest$tome==aTome-1,]$ratio
if((aTome+1) %in% nodes_dest$tome)
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$next_p = nodes_dest[nodes_dest$tome==aTome+1,]$ratio
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$shifted_past = sum(nodes_dest[nodes_dest$tome<aTome-1,]$ratio)
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$shifted_next = sum(nodes_dest[nodes_dest$tome>aTome+1,]$ratio)
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$total_back = Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$precedent +
Tomes_destinations_stats[Tomes_destinations_stats$tome_index==aTome,]$shifted_past
}
Tomes_destinations_stats
sum(TomesProvenancesData[i,-c(1)])
i=1
sum(TomesProvenancesData[i,-c(1)])
round(TomesProvenancesData[i,-c(1)]*100/somme,0)
TomesProvenancesData
Tomes_provenances_stats
Tomes_destinations_stats
tomePrecedent <- t(tomeFollow)
Tomes_provenances_stats = data.frame(tome_index=tome_indexes,precedent=0,shifted_past=0,identity=0,next_p=0,shifted_next=0,total_next=0)
for(aTome in 1:max(tome_indexes))
{
aTomeProv = data.frame(tome=1:nrow(tomePrecedent), frequence=tomePrecedent[aTome,])
aTomeProv = aTomeProv[which(aTomeProv$tome!=aTome),]
nodes_prov=aTomeProv
nodes_prov$ratio = round(nodes_prov$frequence*100/sum(nodes_prov$frequence),0)
if((aTome) %in% nodes_prov$tome)
Tomes_provenances_stats[which(Tomes_provenances_stats$tome_index==aTome),]$identity = nodes_prov[nodes_prov$tome==aTome,]$ratio
if((aTome-1) %in% nodes_prov$tome)
Tomes_provenances_stats[Tomes_provenances_stats$tome_index==aTome,]$precedent = nodes_prov[nodes_prov$tome==aTome-1,]$ratio
if((aTome+1) %in% nodes_prov$tome)
Tomes_provenances_stats[Tomes_provenances_stats$tome_index==aTome,]$next_p = nodes_prov[nodes_prov$tome==aTome+1,]$ratio
Tomes_provenances_stats[Tomes_provenances_stats$tome_index==aTome,]$shifted_past = sum(nodes_prov[nodes_prov$tome<aTome-1,]$ratio)
Tomes_provenances_stats[Tomes_provenances_stats$tome_index==aTome,]$shifted_next = sum(nodes_prov[nodes_prov$tome>aTome+1,]$ratio)
Tomes_provenances_stats[Tomes_provenances_stats$tome_index==aTome,]$total_next = Tomes_provenances_stats[Tomes_provenances_stats$tome_index==aTome,]$next_p +
Tomes_provenances_stats[Tomes_provenances_stats$tome_index==aTome,]$shifted_next
}
Tomes_provenances_stats
TomesProvenancesData = Tomes_provenances_stats[,-c(7)]
somme=sum(TomesProvenancesData[i,-c(1)])
somme
TomesProvenancesData
TomesProvenancesData[i,-c(1)]
ProvData =  PartsProvenancesData[which(PartsProvenancesData$shifted_next>30),c('part_index','shifted_next')]
ProvData
PartsProvenancesData$shifted_next
ProvData =  PartsProvenancesData[which(PartsProvenancesData$shifted_next>25 & PartsProvenancesData$part_index>1),c('part_index','shifted_next')]
ProvData
ChapsProvenancesData
byChaps =  ChapsProvenancesData[which(ChapsProvenancesData$shifted_next>25 & ChapsProvenancesData$chap_index>1),c('chap_index','shifted_next')]
byChaps$classe="Transition"
byChaps$issueCode="TransProvShiftNext"
byChaps$content="Trop d\'arrivées depuis des chapitres suivants"
byChaps$description=paste('Dans',byChaps$shifted_next,"% des cas, le chapitre lu avant n’est pas celui qui précède mais est un chapitre situé après ce chapitre")
byChaps$norm_value=''
byChaps$gravity = -1
byChaps$suggestion_title="Déplacer ce chapitre ou l’englober dans un autre chapitre ou partie"
byChaps$suggestion_content="Ce chapitre doit probablement être un pré-requis à la lecture d’autre(s) chapitre(s) ou partie(s), n’y a t-il pas une
restructuration du cours/chapitre/partie plus intéressante pour éviter ce phénomène ?"
byChaps =  ChapsProvenancesData[which(ChapsProvenancesData$shifted_next>25 & ChapsProvenancesData$chap_index>1),c('chap_index','shifted_next')]
byChaps
ChapsProvenancesData$shifted_next
ChapsProvenancesData
Chaps_provenances_stats
chap_indexes=1:(max(structure$chap_index,na.rm=TRUE))
Chaps_destinations_stats = data.frame(chap_index=chap_indexes,precedent=0,shifted_past=0,identity=0,next_p=0,shifted_next=0,total_back=0)
for(aChap in 1:max(chap_indexes))
{
aChapDest = data.frame(chap=1:(nrow(chapFollow)), frequence=chapFollow[aChap,])
aChapDest = aChapDest[which(aChapDest$chap!=aChap),]
nodes_dest=aChapDest
nodes_dest$ratio = round(nodes_dest$frequence*100/sum(nodes_dest$frequence),0)
if((aChap-1) %in% nodes_dest$chap)
Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$precedent =
nodes_dest[nodes_dest$chap==aChap-1,]$ratio
if((aChap+1) %in% nodes_dest$chap)
Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$next_p = nodes_dest[nodes_dest$chap==aChap+1,]$ratio
Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$shifted_past = sum(nodes_dest[nodes_dest$chap<aChap-1,]$ratio)
Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$shifted_next = sum(nodes_dest[nodes_dest$chap>aChap+1,]$ratio)
Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$total_back = Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$precedent +
Chaps_destinations_stats[Chaps_destinations_stats$chap_index==aChap,]$shifted_past
}
chapPrecedent <- t(chapFollow)
Chaps_provenances_stats = data.frame(chap_index=chap_indexes,precedent=0,shifted_past=0,identity=0,next_p=0,shifted_next=0,total_next=0)
for(aChap in 1:max(chap_indexes))
{
aChapProv = data.frame(chap=1:nrow(chapPrecedent), frequence=chapPrecedent[aChap,])
aChapProv = aChapProv[which(aChapProv$chap!=aChap),]
nodes_prov=aChapProv
nodes_prov$ratio = round(nodes_prov$frequence*100/sum(nodes_prov$frequence),0)
if((aChap-1) %in% nodes_prov$chap)
Chaps_provenances_stats[Chaps_provenances_stats$chap_index==aChap,]$precedent = nodes_prov[nodes_prov$chap==aChap-1,]$ratio
if((aChap+1) %in% nodes_prov$chap)
Chaps_provenances_stats[Chaps_provenances_stats$chap_index==aChap,]$next_p = nodes_prov[nodes_prov$chap==aChap+1,]$ratio
Chaps_provenances_stats[Chaps_provenances_stats$chap_index==aChap,]$shifted_past = sum(nodes_prov[nodes_prov$chap<aChap-1,]$ratio)
Chaps_provenances_stats[Chaps_provenances_stats$chap_index==aChap,]$shifted_next = sum(nodes_prov[nodes_prov$chap>aChap+1,]$ratio)
Chaps_provenances_stats[Chaps_provenances_stats$chap_index==aChap,]$total_next = Chaps_provenances_stats[Chaps_provenances_stats$chap_index==aChap,]$next_p +
Chaps_provenances_stats[Chaps_provenances_stats$chap_index==aChap,]$shifted_next
}
ChapsProvenancesData = Chaps_provenances_stats[,-c(7)]
byChaps =  ChapsProvenancesData[which(ChapsProvenancesData$shifted_next>25 & ChapsProvenancesData$chap_index>1),c('chap_index','shifted_next')]
byChaps
ChapsProvenancesData
byTomes =  TomesProvenancesData[which(TomesProvenancesData$shifted_next>25 & TomesProvenancesData$tome_index>1),c('tome_index','shifted_next')]
byTomes
TomesProvenancesData$shifted_next
TomesProvenancesData
byTomes =  TomesProvenancesData[which(TomesProvenancesData$shifted_next>25 & TomesProvenancesData$tome_index>1),c('tome_index','shifted_next')]
byTomes$classe="Transition"
byTomes$issueCode="TransProvShiftNext"
byTomes$content="Trop d\'arrivées depuis des chapitres suivants"
byTomes$description=paste('Dans',byTomes$shifted_next,"% des cas, le chapitre lu avant n’est pas celui qui précède mais est un chapitre situé après ce chapitre")
byTomes$norm_value=''
byTomes$gravity = -1
byTomes$suggestion_title="Déplacer ce chapitre ou l’englober dans un autre chapitre ou partie"
byTomes$suggestion_content="Ce chapitre doit probablement être un pré-requis à la lecture d’autre(s) chapitre(s) ou partie(s), n’y a t-il pas une
restructuration du cours/chapitre/partie plus intéressante pour éviter ce phénomène ?"
maxProvSHiftedNext =  rbind(byParts,byChaps,byTomes)
maxProvSHiftedNext
byParts =  PartsProvenancesData[which(PartsProvenancesData$shifted_next>25 & PartsProvenancesData$part_index>1),c('part_index','shifted_next')]
byParts$classe="Transition"
byParts$issueCode="TransProvShiftNext"
byParts$content="Trop d\'arrivées depuis des sections suivantes"
byParts$description=paste('Dans',byParts$shifted_next,"% des cas, la section lue avant n’est pas celle qui précède mais est une partie située après cette section")
byParts$norm_value=''
byParts$gravity = -1
byParts$suggestion_title="Déplacer cette section ou l’englober dans une autre section ou chapitre"
byParts$suggestion_content="Cette section doit probablement être un pré-requis à la lecture d’autre(s) chapitre(s) ou section(s), n’y a t-il pas une restructuration du cours/chapitre/partie plus intéressante pour éviter ce phénomène ?"
byChaps =  ChapsProvenancesData[which(ChapsProvenancesData$shifted_next>25 & ChapsProvenancesData$chap_index>1),c('chap_index','shifted_next')]
byChaps$classe="Transition"
byChaps$issueCode="TransProvShiftNext"
byChaps$content="Trop d\'arrivées depuis des chapitres suivants"
byChaps$description=paste('Dans',byChaps$shifted_next,"% des cas, le chapitre lu avant n’est pas celui qui précède mais est un chapitre situé après ce chapitre")
byChaps$norm_value=''
byChaps$gravity = -1
byChaps$suggestion_title="Déplacer ce chapitre ou l’englober dans un autre chapitre ou partie"
byChaps$suggestion_content="Ce chapitre doit probablement être un pré-requis à la lecture d’autre(s) chapitre(s) ou partie(s), n’y a t-il pas une
restructuration du cours/chapitre/partie plus intéressante pour éviter ce phénomène ?"
byTomes =  TomesProvenancesData[which(TomesProvenancesData$shifted_next>25 & TomesProvenancesData$tome_index>1),c('tome_index','shifted_next')]
byTomes$classe="Transition"
byTomes$issueCode="TransProvShiftNext"
byTomes$content="Trop d\'arrivées depuis des chapitres suivants"
byTomes$description=paste('Dans',byTomes$shifted_next,"% des cas, le chapitre lu avant n’est pas celui qui précède mais est un chapitre situé après ce chapitre")
byTomes$norm_value=''
byTomes$gravity = -1
byTomes$suggestion_title="Déplacer ce chapitre ou l’englober dans un autre chapitre ou partie"
byTomes$suggestion_content="Ce chapitre doit probablement être un pré-requis à la lecture d’autre(s) chapitre(s) ou partie(s), n’y a t-il pas une
restructuration du cours/chapitre/partie plus intéressante pour éviter ce phénomène ?"
byChaps
byChaps =  ChapsProvenancesData[which(ChapsProvenancesData$shifted_next>25 & ChapsProvenancesData$chap_index>1),c('chap_index','shifted_next')]
byChaps
ChapsProvenancesData$shifted_next
TomesProvenancesData
byParts
maxProvSHiftedNext =  rbind(byParts,byChaps,byTomes)
maxProvSHiftedNext
byParts =  PartsProvenancesData[which(PartsProvenancesData$shifted_next>25 & PartsProvenancesData$part_index>1),c('part_id','shifted_next')]
structure[,c('part_id','chap_index')]
TomesProvenancesData = merge(Tomes_provenances_stats[,-c(7)], structure[,c('part_id','chap_index')], all.x = TRUE)
TomesProvenancesData
ChapsProvenancesData = merge(Chaps_provenances_stats[,-c(7)], structure[,c('part_id','chap_index')], all.x = TRUE)
ChapsProvenancesData
TomesProvenancesData = merge(Tomes_provenances_stats[,-c(7)], structure[,c('part_id','tome_index')], all.x = TRUE)
TomesProvenancesData
Tomes_provenances_stats
structure[,c('part_id','tome_index')]
structure$type
tomes=unique(structure[which(structure$type=='title-1'),])
tomes
tomes=unique(structure[which(structure$type=='title-1'),]$part_id)
tomes
tomes=data.frame(part_id= unique(structure[which(structure$type=='title-1'),]$part_id))
tomes
tome$tome_id=1:nrow(tomes)
tomes$tome_id=1:nrow(tomes)
tomes
merge(Tomes_provenances_stats[,-c(7)], tomes)
Tomes_provenances_stats
tomes=data.frame(part_id= unique(structure[which(structure$type=='title-1'),]$part_id))
tomes$tome_index=1:nrow(tomes)
merge(Tomes_provenances_stats[,-c(7)], tomes)
TomesProvenancesData =merge(Tomes_provenances_stats[,-c(7)], tomes)
chaps=data.frame(part_id= unique(structure[which(structure$type=='title-2'),]$part_id))
chaps
chaps$chap_index=1:nrow(chaps)
chaps$chap_index=1:nrow(chaps)
chaps
ChapsProvenancesData
Chaps_provenances_stats
ChapsProvenancesData =merge(Chaps_provenances_stats[,-c(7)], chaps)
ChapsProvenancesData
byParts =  PartsProvenancesData[which(PartsProvenancesData$shifted_next>25 & PartsProvenancesData$part_index>1),c('part_index','shifted_next')]
byParts
byParts =  PartsProvenancesData[which(PartsProvenancesData$shifted_next>25 & PartsProvenancesData$part_index>1),c('part_id','shifted_next')]
merge(Parts_provenances_stats[,-c(7)], structure[,c('part_index','part_id')])
PartsProvenancesData =merge(Parts_provenances_stats[,-c(7)], structure[,c('part_index','part_id')])
PartsProvenancesData
byTomes =  TomesProvenancesData[which(TomesProvenancesData$shifted_next>25 & TomesProvenancesData$tome_index>1),c('part_id','shifted_next')]
byTomes
byParts =  PartsProvenancesData[which(PartsProvenancesData$shifted_next>25 & PartsProvenancesData$part_index>1),c('part_id','shifted_next')]
byParts$classe="Transition"
byParts$issueCode="TransProvShiftNext"
byParts$content="Trop d\'arrivées depuis des sections suivantes"
byParts$description=paste('Dans',byParts$shifted_next,"% des cas, la section lue avant n’est pas celle qui précède mais est une partie située après cette section")
byParts$norm_value=''
byParts$gravity = -1
byParts$suggestion_title="Déplacer cette section ou l’englober dans une autre section ou chapitre"
byParts$suggestion_content="Cette section doit probablement être un pré-requis à la lecture d’autre(s) chapitre(s) ou section(s), n’y a t-il pas une restructuration du cours/chapitre/partie plus intéressante pour éviter ce phénomène ?"
maxProvSHiftedNext =  rbind(byParts,byChaps,byTomes)
maxProvSHiftedNext
byParts =  PartsProvenancesData[which(PartsProvenancesData$shifted_next>25 & PartsProvenancesData$part_index>1),c('part_id','shifted_next')]
byParts$classe="Transition"
byParts$issueCode="TransProvShiftNext"
byParts$content="Trop d\'arrivées depuis des sections suivantes"
byParts$description=paste('Dans',byParts$shifted_next,"% des cas, la section lue avant n’est pas celle qui précède mais est une partie située après cette section")
byParts$suggestion_title="Déplacer cette section ou l’englober dans une autre section ou chapitre"
byParts$suggestion_content="Cette section doit probablement être un pré-requis à la lecture d’autre(s) chapitre(s) ou section(s), n’y a t-il pas une restructuration du cours/chapitre/partie plus intéressante pour éviter ce phénomène ?"
byParts = PartsProvenancesData[which(PartsProvenancesData$shifted_past>20 & PartsProvenancesData$part_index>1),c('part_id','shifted_past')]
byParts
byChaps = ChapsProvenancesData[which(ChapsProvenancesData$shifted_past>20 & ChapsProvenancesData$part_index>1),c('part_id','shifted_past')]
byChaps$classe="Transition"
byChaps$issueCode="TransProvShiftPast"
byChaps$content="Trop d\'arrivées depuis des chapitre précédents éloignés"
byChaps$description=paste('Dans',byChaps$shifted_past," le chapitre  lu avant n’est pas directement celui qui précède mais est un chapitre précédent éloigné.")
byChaps$suggestion_title="Revoir le chapitre"
byChaps$suggestion_content="Est-ce que ce chapitre est bien positionné dans le plan du cours ?"
byChaps = ChapsProvenancesData[which(ChapsProvenancesData$shifted_past>20 & ChapsProvenancesData$part_index>1),c('part_id','shifted_past')]
byChaps
ChapsProvenancesData
ChapsProvenancesData$shifted_past>20
max(ChapsProvenancesData$part_index)
max(ChapsProvenancesData$chap_index)
byChaps = ChapsProvenancesData[which(ChapsProvenancesData$shifted_past>20),c('part_id','shifted_past')]
byChaps
byChaps$classe="Transition"
byChaps$issueCode="TransProvShiftPast"
byChaps$content="Trop d\'arrivées depuis des chapitre précédents éloignés"
byChaps$description=paste('Dans',byChaps$shifted_past," le chapitre  lu avant n’est pas directement celui qui précède mais est un chapitre précédent éloigné.")
byChaps$suggestion_title="Revoir le chapitre"
byChaps$suggestion_content="Est-ce que ce chapitre est bien positionné dans le plan du cours ?"
byChaps
byTomes = ChapsProvenancesData[which(ChapsProvenancesData$shifted_past>20),c('part_id','shifted_past')]
byTomes$classe="Transition"
byTomes$issueCode="TransProvShiftPast"
byTomes$content="Trop d\'arrivées depuis des parties précédentes éloignées"
byTomes$description=paste('Dans',byTomes$shifted_past," la partie  lu avant n’est pas directement celle qui précède mais est une partie précédente éloignée.")
byTomes$suggestion_title="Revoir la partie"
byTomes$suggestion_content="Est-ce que la partie est bien positionnée dans le plan du cours ?"
byTomes
Parts_destinations_stats
PartsDestinationsData
Parts_destinations_stats
Chapters_destinations_stats
Chaps_destinations_stats
