options(stringsAsFactors=FALSE)
#options(warn=-1)
library('jsonlite')
library('reshape2')
library('Peirce')
library('plyr')
#library('data.table')
BaseURL = ('/home/madjid/Dropbox/rcoreada')
#BaseURL="C:/Users/MADJID/Desktop/rcoreada"
coreaDataURL = "/home/madjid/dev/CoReaDa/coursesdata"
#coreaDataURL = "C:/Users/MADJID/Desktop/CoReaDa/coursesdata"
home='/home/madjid/Dropbox/rcoreada/Dataset'
#home="C:/Users/MADJID/Desktop/rcoreada/Dataset"
coursesdata_home='/home/madjid/dev/CoReaDa/rawdata'
#coursesdata_home='C:/Users/MADJID/Desktop/CoReaDa/rawdata'
DataBaseURL = paste(BaseURL,'R', sep='/')
#o = fromJSON(jsonObj)
#o$a
range01 <- function(x, ...){(x - min(x, ...)) / (max(x, ...) - min(x, ...))}
consistency.constant <- 1.4826
DoubleMAD <- function(x, zero.mad.action="warn"){
# The zero.mad.action determines the action in the event of an MAD of zero.
# Possible values: "stop", "warn", "na" and "warn and na".
x         <- x[!is.na(x)]
m         <- median(x)
abs.dev   <- abs(x - m)
left.mad  <- median(abs.dev[x<=m])
right.mad <- median(abs.dev[x>=m])
if (left.mad == 0 || right.mad == 0){
if (zero.mad.action == "stop") stop("MAD is 0")
if (zero.mad.action %in% c("warn", "warn and na")) warning("MAD is 0")
if (zero.mad.action %in% c(  "na", "warn and na")){
if (left.mad  == 0) left.mad  <- NA
if (right.mad == 0) right.mad <- NA
}
}
return(c(left.mad, right.mad))
}
DoubleMADsFromMedian <- function(x, zero.mad.action="warn"){
# The zero.mad.action determines the action in the event of an MAD of zero.
# Possible values: "stop", "warn", "na" and "warn and na".
two.sided.mad <- DoubleMAD(x, zero.mad.action)
m <- median(x, na.rm=TRUE)
x.mad <- rep(two.sided.mad[1], length(x))
x.mad[x > m] <- two.sided.mad[2]
mad.distance <- abs(x - m) / x.mad
mad.distance[x==m] <- 0
return(mad.distance)
}
outliersMAD <- function(data, MADCutOff = 2.5, replace = NA, values = FALSE, bConstant = 1.4826, digits = 2) {
#compute number of absolute MADs away for each value
#formula: abs( ( x - median(x) ) )/ mad(x)
absMADAway <- abs((data - median(data, na.rm = T))/mad(data, constant = bConstant, na.rm = T))
#subset data that has absMADAway greater than the MADCutOff and replace them with replace
#can also replace values other than replace
data[absMADAway > MADCutOff] <- replace
if (values == TRUE) {
return(round(absMADAway, digits)) #if values == TRUE, return number of mads for each value
} else {
return(round(data, digits)) #otherwise, return values with outliers replaced
}
}
3522386
code
code=3522386
rawd = paste("/home/madjid/dev/CoReaDa/rawdata",code,sep='/')
cdurl = paste("/home/madjid/dev/CoReaDa/coursesdata",code,sep='/')
coreaDataURL = "/home/madjid/dev/CoReaDa/coursesdata"
setwd(rawd)
load('data.rdata')
head(data
)
head(data)
code
code=1885491
rawd = paste("/home/madjid/dev/CoReaDa/rawdata",code,sep='/')
cdurl = paste("/home/madjid/dev/CoReaDa/coursesdata",code,sep='/')
coreaDataURL = "/home/madjid/dev/CoReaDa/coursesdata"
setwd(rawd)
load('data.rdata')
head(data)
2766951
code
code=2766951
rawd = paste("/home/madjid/dev/CoReaDa/rawdata",code,sep='/')
cdurl = paste("/home/madjid/dev/CoReaDa/coursesdata",code,sep='/')
coreaDataURL = "/home/madjid/dev/CoReaDa/coursesdata"
setwd(rawd)
load('data.rdata')
head(data)
