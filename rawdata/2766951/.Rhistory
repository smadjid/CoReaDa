byChaps$error_value=round(100*byChaps$destination_future,2)
byChaps$delta=byChaps$destination_future
destinationFuture = byChaps
}
####### Destination Past
byChaps=subset(chaptersData, (chaptersData$destination_past >0.3)&(chaptersData$id<max(chaptersData$id)) , select=c('part_id','destination_past'))
if(nrow(byChaps)>0){
byChaps$classe="destination_past"
byChaps$issueCode="max"
byChaps$error_value=round(100*byChaps$destination_past,2)
byChaps$delta=byChaps$destination_past
destinationPast = byChaps
}
########### Session end
byChaps = chaptersData[(DoubleMADsFromMedian(chaptersData$rupture_tx)>2)&
(chaptersData$rupture_tx>median(chaptersData$rupture_tx)&(chaptersData$id<max(chaptersData$id)) ),c('part_id','rupture_tx')]
if(nrow(byChaps)>0){
byChaps$classe="rupture_tx"
byChaps$issueCode="max"
byChaps$error_value=round(100*byChaps$rupture_tx,2)
byChaps$delta=round(100*byChaps$rupture_tx,2)
maxRSStops =   byChaps
}
####### Max Stops
byChaps = chaptersData[(DoubleMADsFromMedian(chaptersData$norecovery_tx)>2)&
(chaptersData$norecovery_tx>median(chaptersData$norecovery_tx) )&(chaptersData$id<max(chaptersData$id)),c('part_id','norecovery_tx')]
if(nrow(byChaps)>0){
byChaps$classe="norecovery_tx"
byChaps$issueCode="max"
byChaps$delta=byChaps$norecovery_tx - median(chaptersData$norecovery_tx)
byChaps$error_value = round(100*byChaps$norecovery_tx,2)
maxFinalStops =   byChaps
}
####### Recovery ANormal
byChaps = subset(chaptersData, (chaptersData$resume_abnormal_tx > 0.5)&(chaptersData$id<max(chaptersData$id)) , select=c('part_id','resume_abnormal_tx'))
if(nrow(byChaps)>0){
byChaps$classe="resume_abnormal_tx"
byChaps$issueCode="max"
byChaps$error_value=round(100*byChaps$resume_abnormal_tx,2)
byChaps$delta = byChaps$resume_abnormal_tx;
resumeLinearity =   byChaps
}
####### Recovery Past
byChaps = subset(chaptersData, (chaptersData$resume_past > 0.33)&(chaptersData$id<max(chaptersData$id)) , select=c('part_id','resume_past'))
if(nrow(byChaps)>0){
byChaps$classe="resume_past"
byChaps$issueCode="max"
byChaps$error_value=round(100*byChaps$resume_past,2)
byChaps$delta = byChaps$resume_past
recoveryPast =   byChaps
}
####### Recovery Future
byChaps = subset(chaptersData, (chaptersData$resume_future > 0.33)&(chaptersData$id<max(chaptersData$id)) , select=c('part_id','resume_future'))
if(nrow(byChaps)>0){
byChaps$classe="resume_future"
byChaps$issueCode="max"
byChaps$delta = byChaps$resume_future
byChaps$error_value=round(100*byChaps$resume_future,2)
recoveryFuture =   byChaps
}
##############CONCATENATE EVERYTHING##############
names(minInterest)[c(1,2)]=
names(minVisits)[c(1,2)]=
names(minReaders)[c(1,2)]=
names(maxRereadings)[c(1,2)]=
names(maxDijRereadings)[c(1,2)]=
names(maxConjRereadings)[c(1,2)]=
names(readingLinearity)[c(1,2)]=
names(provenanceLinearity)[c(1,2)]=
names(provenancePast)[c(1,2)]=
names(provenanceFuture)[c(1,2)]=
names(destinationLinearity)[c(1,2)]=
names(destinationPast)[c(1,2)]=
names(destinationFuture)[c(1,2)]=
names(maxRSStops)[c(1,2)]=
names(maxFinalStops)[c(1,2)]=
names(resumeLinearity)[c(1,2)]=
names(recoveryPast)[c(1,2)]=
names(recoveryFuture)[c(1,2)]=
c("part_id","value")
facts =
rbind(
minInterest,
minVisits,
minReaders,
maxRereadings,
maxDijRereadings,
maxConjRereadings,
readingLinearity,
provenanceLinearity,
provenancePast,
provenanceFuture,
destinationLinearity,
destinationPast,
destinationFuture,
maxRSStops,
maxFinalStops,
resumeLinearity,
recoveryFuture,
recoveryPast)
rownames(facts)=NULL
if(min(PartData$speed>0)){
names(minSpeed)[c(1,2)]=
names(maxSpeed)[c(1,2)]=c("part_id","value")
facts =  rbind(facts,minSpeed,maxSpeed)
}
return(facts)
}
rawd = "/home/madjid/dev/CoReaDa/rawdata/3522386"
cdurl = "/home/madjid/dev/CoReaDa/coursesdata/3522386"
setwd(rawd)
load('data.rdata')
load('structure.rdata')
load('PartData.rdata')
facts = course_issues_calculation(data, structure,PartData)
save(facts, file="facts.rdata")
CourseData.json = toJSON(meltedCourseData)
facts = course_issues_calculation(data, structure,PartData)
save(facts, file="facts.rdata")
facts.json = toJSON(facts)
cat(facts.json, file=paste(cdurl,"facts.json",sep='/'))
rawd = "/home/madjid/dev/CoReaDa/rawdata/3449001"
cdurl = "/home/madjid/dev/CoReaDa/coursesdata/3449001"
setwd(rawd)
load('data.rdata')
load('structure.rdata')
load('PartData.rdata')
facts = course_issues_calculation(data, structure,PartData)
save(facts, file="facts.rdata")
facts.json = toJSON(facts)
cat(facts.json, file=paste(cdurl,"facts.json",sep='/'))
rawd = "/home/madjid/dev/CoReaDa/rawdata/1946386"
cdurl = "/home/madjid/dev/CoReaDa/coursesdata/1946386"
setwd(rawd)
load('data.rdata')
load('structure.rdata')
load('PartData.rdata')
facts = course_issues_calculation(data, structure,PartData)
save(facts, file="facts.rdata")
facts.json = toJSON(facts)
cat(facts.json, file=paste(cdurl,"facts.json",sep='/'))
rawd = "/home/madjid/dev/CoReaDa/rawdata/1885491"
cdurl = "/home/madjid/dev/CoReaDa/coursesdata/1885491"
setwd(rawd)
load('data.rdata')
load('structure.rdata')
load('PartData.rdata')
facts = course_issues_calculation(data, structure,PartData)
save(facts, file="facts.rdata")
facts.json = toJSON(facts)
cat(facts.json, file=paste(cdurl,"facts.json",sep='/'))
rawd = "/home/madjid/dev/CoReaDa/rawdata/3432066"
cdurl = "/home/madjid/dev/CoReaDa/coursesdata/3432066"
setwd(rawd)
load('data.rdata')
load('structure.rdata')
load('PartData.rdata')
facts = course_issues_calculation(data, structure,PartData)
save(facts, file="facts.rdata")
facts.json = toJSON(facts)
cat(facts.json, file=paste(cdurl,"facts.json",sep='/'))
rawd = "/home/madjid/dev/CoReaDa/rawdata/3013711"
cdurl = "/home/madjid/dev/CoReaDa/coursesdata/3013711"
setwd(rawd)
load('data.rdata')
load('structure.rdata')
load('PartData.rdata')
facts = course_issues_calculation(data, structure,PartData)
save(facts, file="facts.rdata")
facts.json = toJSON(facts)
cat(facts.json, file=paste(cdurl,"facts.json",sep='/'))
rawd = "/home/madjid/dev/CoReaDa/rawdata/2984401"
cdurl = "/home/madjid/dev/CoReaDa/coursesdata/2984401"
setwd(rawd)
load('data.rdata')
load('structure.rdata')
load('PartData.rdata')
facts = course_issues_calculation(data, structure,PartData)
save(facts, file="facts.rdata")
facts.json = toJSON(facts)
cat(facts.json, file=paste(cdurl,"facts.json",sep='/'))
rawd = "/home/madjid/dev/CoReaDa/rawdata/2778161"
cdurl = "/home/madjid/dev/CoReaDa/coursesdata/2778161"
setwd(rawd)
load('data.rdata')
load('structure.rdata')
load('PartData.rdata')
facts = course_issues_calculation(data, structure,PartData)
save(facts, file="facts.rdata")
facts.json = toJSON(facts)
cat(facts.json, file=paste(cdurl,"facts.json",sep='/'))
rawd = "/home/madjid/dev/CoReaDa/rawdata/2766951"
cdurl = "/home/madjid/dev/CoReaDa/coursesdata/2766951"
setwd(rawd)
load('data.rdata')
load('structure.rdata')
load('PartData.rdata')
facts = course_issues_calculation(data, structure,PartData)
save(facts, file="facts.rdata")
facts.json = toJSON(facts)
cat(facts.json, file=paste(cdurl,"facts.json",sep='/'))
###############  COURSE ISSUES
course_issues_calculation <- function(data, structure,PartData){
######################INDICATORS INIT.###############################
minInterest =    # interest
minVisits =   	# Actions_tx
minReaders = 		# readers_tx 			<----------
minRS = 		# rs_tx  			<----------
maxSpeed = 		# speed
maxRereadings = 	# rereads_tx
maxDijRereadings = 	# rereads_dec_tx
maxConjRereadings = 	# rereads_seq_tx
readingLinearity = 	# reading_not_linear  		<----------
provenanceLinearity = 	# provenance_not_linear
provenanceFuture = 	# provenance_future
provenancePast = 	# provenance_past
destinationLinearity = # destination_not_linear
destinationFuture = 	# destination_future
destinationPast = 	# destination_past
maxRSStops = 		# rupture_tx
maxFinalStops = 	# norecovery_tx
resumeLinearity = 	# resume_abnormal_tx  		<----------
recoveryPast = 	# resume_past
recoveryFuture =	#resume_future
data.frame(part_id=integer(),value=character(),classe=character(),issueCode=character(),delta=numeric(),error_value=numeric())
chaptersData = PartData[which(PartData$type=='chapitre'),]
####### TROP PEU D'INTERET
byChaps = chaptersData[(DoubleMADsFromMedian(chaptersData$interest)>1)&(chaptersData$interest<median(chaptersData$interest) ),c('part_id','interest')]
if(nrow(byChaps)>0){
byChaps$classe="interest"
byChaps$issueCode="min"
byChaps$delta  = median(chaptersData$interest,na.rm = TRUE)- byChaps$interest
byChaps$error_value = round(median(chaptersData$interest,na.rm = TRUE)/ byChaps$interest,2)
minInterest = byChaps
}
####### NOMBRE DE VISITES TROP PEU
byChaps = chaptersData[(DoubleMADsFromMedian(chaptersData$Actions_tx)>1)&(chaptersData$Actions_tx<median(chaptersData$Actions_tx) ),c('part_id','Actions_tx')]
if(nrow(byChaps)>0){
byChaps$classe="Actions_tx"
byChaps$issueCode="min"
byChaps$delta  = median(chaptersData$Actions_tx,na.rm = TRUE)- byChaps$Actions_tx
byChaps$error_value = round(median(chaptersData$Actions_tx,na.rm = TRUE)/ byChaps$Actions_tx,2)
minVisits = byChaps
}
####### NOMBRE DE LECTEURS TROP PEU
byChaps = chaptersData[(DoubleMADsFromMedian(chaptersData$readers_tx)>1)&(chaptersData$readers_tx<median(chaptersData$readers_tx) ),c('part_id','readers_tx')]
if(nrow(byChaps)>0){
byChaps$classe="readers_tx"
byChaps$issueCode="min"
byChaps$delta  = median(chaptersData$readers_tx,na.rm = TRUE)- byChaps$readers_tx
byChaps$error_value = round(median(chaptersData$readers_tx,na.rm = TRUE)/ byChaps$readers_tx,2)
minReaders = byChaps
}
####### NOMBRE DE RS TROP PEU
byChaps = chaptersData[(DoubleMADsFromMedian(chaptersData$rs_tx)>1)&(chaptersData$rs_tx<median(chaptersData$rs_tx) ),c('part_id','rs_tx')]
if(nrow(byChaps)>0){
byChaps$classe="rs_tx"
byChaps$issueCode="min"
byChaps$delta  = median(chaptersData$rs_tx,na.rm = TRUE)- byChaps$rs_tx
byChaps$error_value = round(median(chaptersData$rs_tx,na.rm = TRUE)/ byChaps$rs_tx,2)
minRS = byChaps
}
################## Vitesse MAX
if(min(PartData$speed>0)){
byChaps = chaptersData[(DoubleMADsFromMedian(chaptersData$speed)>2)&(chaptersData$speed>median(chaptersData$speed) ),c('part_id','speed')]
if(nrow(byChaps)>0){
byChaps$classe="speed"
byChaps$issueCode="max"
byChaps$delta = byChaps$speed - median(chaptersData$speed,na.rm = TRUE)
byChaps$error_value = round(byChaps$speed / median(chaptersData$speed,na.rm = TRUE) ,2)
minSpeed =  byChaps
}
}
################## Vitesse MIN
if(min(PartData$speed>0)){
byChaps = chaptersData[(DoubleMADsFromMedian(chaptersData$speed)>1)&(chaptersData$speed<median(chaptersData$speed) ),c('part_id','speed')]
if(nrow(byChaps)>0){
byChaps$classe="speed"
byChaps$issueCode="min"
byChaps$delta = median(chaptersData$speed,na.rm = TRUE) /byChaps$speed
byChaps$error_value = round(median(chaptersData$speed,na.rm = TRUE) /byChaps$speed  ,2)
maxSpeed =  byChaps
}
}
####### MAX REREADINGS
byChaps = chaptersData[(DoubleMADsFromMedian(chaptersData$rereads_tx)>2)&
(chaptersData$rereads_tx>median(chaptersData$rereads_tx) ),c('part_id','rereads_tx')]
if(nrow(byChaps)>0){
byChaps$classe="rereads_tx"
byChaps$issueCode="max"
byChaps$delta=byChaps$rereads_tx-median(chaptersData$rereads_tx)
byChaps$error_value = round(byChaps$rereads_tx/median(chaptersData$rereads_tx),2)
maxRereadings =  byChaps
}
####### Max Conjoint Rereadings
byChaps = chaptersData[(DoubleMADsFromMedian(chaptersData$rereads_seq_tx)>2)&
(chaptersData$rereads_seq_tx>median(chaptersData$rereads_seq_tx) ),c('part_id','rereads_seq_tx')]
if(nrow(byChaps)>0){
byChaps=byChaps[,c('part_id','rereads_seq_tx')]
byChaps$classe="rereads_seq_tx"
byChaps$issueCode="max"
byChaps$delta=byChaps$rereads_seq_tx-median(chaptersData$rereads_seq_tx)
byChaps$error_value = round(byChaps$rereads_seq_tx/median(chaptersData$rereads_seq_tx),2)
maxConjRereadings =  byChaps
}
####### Max Disjoint Rereadings
byChaps = chaptersData[(DoubleMADsFromMedian(chaptersData$rereads_dec_tx)>2)&
(chaptersData$rereads_dec_tx>median(chaptersData$rereads_dec_tx) ),c('part_id','rereads_dec_tx')]
if(nrow(byChaps)>0){
byChaps=byChaps[,c('part_id','rereads_dec_tx')]
byChaps$classe="rereads_dec_tx"
byChaps$issueCode="max"
byChaps$delta=byChaps$rereads_dec_tx-median(chaptersData$rereads_dec_tx)
byChaps$error_value = round(byChaps$rereads_dec_tx/median(chaptersData$rereads_dec_tx),2)
maxDijRereadings =  byChaps
}
####### Reading Linearity
byChaps = chaptersData[(DoubleMADsFromMedian(chaptersData$reading_not_linear)>2)&
(chaptersData$reading_not_linear>median(chaptersData$reading_not_linear) &(chaptersData$id>min(chaptersData$id))&(chaptersData$id<max(chaptersData$id))),c('part_id','reading_not_linear')]
if(nrow(byChaps)>0){
byChaps$classe="reading_not_linear"
byChaps$issueCode="max"
byChaps$delta = byChaps$reading_not_linear
byChaps$error_value =round(100*byChaps$reading_not_linear,2)
readingLinearity = byChaps
}
####### Provenance Linearity
byChaps=subset(chaptersData, (chaptersData$provenance_not_linear>0.5)&(chaptersData$id>min(chaptersData$id)) , select=c('part_id','provenance_not_linear'))
if(nrow(byChaps)>0){
byChaps$classe="provenance_not_linear"
byChaps$issueCode="max"
byChaps$error_value=round(100*byChaps$provenance_not_linear,2)
byChaps$delta = byChaps$provenance_not_linear
provenanceLinearity = byChaps
}
####### Provenance Future
byChaps=subset(chaptersData, (chaptersData$provenance_future>0.5) &(chaptersData$id>min(chaptersData$id)) , select=c('part_id','provenance_future'))
if(nrow(byChaps)>0){
byChaps$classe="provenance_future"
byChaps$issueCode="max"
byChaps$error_value=round(100*byChaps$provenance_future,2)
byChaps$delta = byChaps$provenance_future
provenanceFuture = byChaps
}
####### Provenance Past
byChaps=subset(chaptersData, (chaptersData$provenance_past>0.3)&(chaptersData$id<max(chaptersData$id)) , select=c('part_id','provenance_past'))
if(nrow(byChaps)>0){
byChaps$classe="provenance_past"
byChaps$issueCode="TransProvShift"
byChaps$error_value=round(100*byChaps$provenance_past,2)
byChaps$delta = byChaps$provenance_past
provenancePast = byChaps
}
####### Destination Linearity
byChaps=subset(chaptersData, (chaptersData$destination_not_linear >0.5)&(chaptersData$id<max(chaptersData$id)) , select=c('part_id','destination_not_linear'))
if(nrow(byChaps)>0){
byChaps$classe="destination_not_linear"
byChaps$issueCode="TransDestShift"
byChaps$error_value=round(100*byChaps$destination_not_linear,2)
byChaps$delta=byChaps$destination_not_linear
destinationLinearity = byChaps
}
####### Destination Future
byChaps=subset(chaptersData, (chaptersData$destination_future >0.3)&(chaptersData$id<max(chaptersData$id)) , select=c('part_id','destination_future'))
if(nrow(byChaps)>0){
byChaps$classe="destination_future"
byChaps$issueCode="max"
byChaps$error_value=round(100*byChaps$destination_future,2)
byChaps$delta=byChaps$destination_future
destinationFuture = byChaps
}
####### Destination Past
byChaps=subset(chaptersData, (chaptersData$destination_past >0.3)&(chaptersData$id<max(chaptersData$id)) , select=c('part_id','destination_past'))
if(nrow(byChaps)>0){
byChaps$classe="destination_past"
byChaps$issueCode="max"
byChaps$error_value=round(100*byChaps$destination_past,2)
byChaps$delta=byChaps$destination_past
destinationPast = byChaps
}
########### Session end
byChaps = chaptersData[(DoubleMADsFromMedian(chaptersData$rupture_tx)>2)&
(chaptersData$rupture_tx>median(chaptersData$rupture_tx)&(chaptersData$id<max(chaptersData$id)) ),c('part_id','rupture_tx')]
if(nrow(byChaps)>0){
byChaps$classe="rupture_tx"
byChaps$issueCode="max"
byChaps$error_value=round(100*byChaps$rupture_tx,2)
byChaps$delta=round(100*byChaps$rupture_tx,2)
maxRSStops =   byChaps
}
####### Max Stops
byChaps = chaptersData[(DoubleMADsFromMedian(chaptersData$norecovery_tx)>2)&
(chaptersData$norecovery_tx>median(chaptersData$norecovery_tx) )&(chaptersData$id<max(chaptersData$id)),c('part_id','norecovery_tx')]
if(nrow(byChaps)>0){
byChaps$classe="norecovery_tx"
byChaps$issueCode="max"
byChaps$delta=byChaps$norecovery_tx - median(chaptersData$norecovery_tx)
byChaps$error_value = round(100*byChaps$norecovery_tx,2)
maxFinalStops =   byChaps
}
####### Recovery ANormal
byChaps = subset(chaptersData, (chaptersData$resume_abnormal_tx > 0.5)&(chaptersData$id<max(chaptersData$id)) , select=c('part_id','resume_abnormal_tx'))
if(nrow(byChaps)>0){
byChaps$classe="resume_abnormal_tx"
byChaps$issueCode="max"
byChaps$error_value=round(100*byChaps$resume_abnormal_tx,2)
byChaps$delta = byChaps$resume_abnormal_tx;
resumeLinearity =   byChaps
}
####### Recovery Past
byChaps = subset(chaptersData, (chaptersData$resume_past > 0.33)&(chaptersData$id<max(chaptersData$id)) , select=c('part_id','resume_past'))
if(nrow(byChaps)>0){
byChaps$classe="resume_past"
byChaps$issueCode="max"
byChaps$error_value=round(100*byChaps$resume_past,2)
byChaps$delta = byChaps$resume_past
recoveryPast =   byChaps
}
####### Recovery Future
byChaps = subset(chaptersData, (chaptersData$resume_future > 0.33)&(chaptersData$id<max(chaptersData$id)) , select=c('part_id','resume_future'))
if(nrow(byChaps)>0){
byChaps$classe="resume_future"
byChaps$issueCode="max"
byChaps$delta = byChaps$resume_future
byChaps$error_value=round(100*byChaps$resume_future,2)
recoveryFuture =   byChaps
}
##############CONCATENATE EVERYTHING##############
names(minInterest)[c(1,2)]=
names(minVisits)[c(1,2)]=
names(minReaders)[c(1,2)]=
names(maxRereadings)[c(1,2)]=
names(maxDijRereadings)[c(1,2)]=
names(maxConjRereadings)[c(1,2)]=
names(readingLinearity)[c(1,2)]=
names(provenanceLinearity)[c(1,2)]=
names(provenancePast)[c(1,2)]=
names(provenanceFuture)[c(1,2)]=
names(destinationLinearity)[c(1,2)]=
names(destinationPast)[c(1,2)]=
names(destinationFuture)[c(1,2)]=
names(maxRSStops)[c(1,2)]=
names(maxFinalStops)[c(1,2)]=
names(resumeLinearity)[c(1,2)]=
names(recoveryPast)[c(1,2)]=
names(recoveryFuture)[c(1,2)]=
c("part_id","value")
facts =
rbind(
minInterest,
minVisits,
minReaders,
maxRereadings,
maxDijRereadings,
maxConjRereadings,
readingLinearity,
provenanceLinearity,
provenancePast,
provenanceFuture,
destinationLinearity,
destinationPast,
destinationFuture,
maxRSStops,
maxFinalStops,
resumeLinearity,
recoveryFuture,
recoveryPast)
rownames(facts)=NULL
if(min(PartData$speed>0)){
names(minSpeed)[c(1,2)]=
names(maxSpeed)[c(1,2)]=c("part_id","value")
facts =  rbind(facts,minSpeed,maxSpeed)
}
return(facts)
}
do_verification <- function(code){
rawd = "/home/madjid/dev/CoReaDa/rawdata/"+code
cdurl = "/home/madjid/dev/CoReaDa/coursesdata/"+code
setwd(rawd)
load('data.rdata')
load('structure.rdata')
load('PartData.rdata')
facts = course_issues_calculation(data, structure,PartData)
save(facts, file="facts.rdata")
facts.json = toJSON(facts)
cat(facts.json, file=paste(cdurl,"facts.json",sep='/'))
print('COREADA OK!')
}
do_verification <- function('3522386')
do_verification('3522386')
rawd = paste("/home/madjid/dev/CoReaDa/rawdata/",code,sep='/')
do_verification <- function(code){
rawd = paste("/home/madjid/dev/CoReaDa/rawdata",code,sep='/')
cdurl = paste("/home/madjid/dev/CoReaDa/coursesdata",code,sep='/')
setwd(rawd)
load('data.rdata')
load('structure.rdata')
load('PartData.rdata')
facts = course_issues_calculation(data, structure,PartData)
save(facts, file="facts.rdata")
facts.json = toJSON(facts)
cat(facts.json, file=paste(cdurl,"facts.json",sep='/'))
print('COREADA OK!')
}
do_verification('3522386')
do_verification('1946386')
do_verification('1885491')
do_verification('3432066')
do_verification('3013711')
do_verification('2984401')
do_verification('2778161')
do_verification('2766951')
